/* automatically generated by rust-bindgen 0.71.1 */

#[doc = r" If Bindgen could only determine the size and alignment of a"]
#[doc = r" type, it is represented like this."]
#[derive(PartialEq, Copy, Clone, Debug, Hash)]
#[repr(C)]
pub struct __BindgenOpaqueArray<T: Copy, const N: usize>(pub [T; N]);
impl<T: Copy + Default, const N: usize> Default for __BindgenOpaqueArray<T, N> {
    fn default() -> Self {
        Self([<T as Default>::default(); N])
    }
}
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const __BIONIC__: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __bos_level: u32 = 0;
pub const __ANDROID_API_FUTURE__: u32 = 10000;
pub const __ANDROID_API__: u32 = 10000;
pub const __ANDROID_API_G__: u32 = 9;
pub const __ANDROID_API_I__: u32 = 14;
pub const __ANDROID_API_J__: u32 = 16;
pub const __ANDROID_API_J_MR1__: u32 = 17;
pub const __ANDROID_API_J_MR2__: u32 = 18;
pub const __ANDROID_API_K__: u32 = 19;
pub const __ANDROID_API_L__: u32 = 21;
pub const __ANDROID_API_L_MR1__: u32 = 22;
pub const __ANDROID_API_M__: u32 = 23;
pub const __ANDROID_API_N__: u32 = 24;
pub const __ANDROID_API_N_MR1__: u32 = 25;
pub const __ANDROID_API_O__: u32 = 26;
pub const __ANDROID_API_O_MR1__: u32 = 27;
pub const __ANDROID_API_P__: u32 = 28;
pub const __ANDROID_API_Q__: u32 = 29;
pub const __ANDROID_API_R__: u32 = 30;
pub const __ANDROID_API_S__: u32 = 31;
pub const __ANDROID_API_T__: u32 = 33;
pub const __ANDROID_API_U__: u32 = 34;
pub const __ANDROID_API_V__: u32 = 35;
pub const __ANDROID_NDK__: u32 = 1;
pub const __NDK_MAJOR__: u32 = 27;
pub const __NDK_MINOR__: u32 = 0;
pub const __NDK_BETA__: u32 = 0;
pub const __NDK_BUILD__: u32 = 10883340;
pub const __NDK_CANARY__: u32 = 1;
pub const WCHAR_MIN: u8 = 0u8;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const JNI_FALSE: u32 = 0;
pub const JNI_TRUE: u32 = 1;
pub const JNI_VERSION_1_1: u32 = 65537;
pub const JNI_VERSION_1_2: u32 = 65538;
pub const JNI_VERSION_1_4: u32 = 65540;
pub const JNI_VERSION_1_6: u32 = 65542;
pub const JNI_OK: u32 = 0;
pub const JNI_ERR: i32 = -1;
pub const JNI_EDETACHED: i32 = -2;
pub const JNI_EVERSION: i32 = -3;
pub const JNI_ENOMEM: i32 = -4;
pub const JNI_EEXIST: i32 = -5;
pub const JNI_EINVAL: i32 = -6;
pub const JNI_COMMIT: u32 = 1;
pub const JNI_ABORT: u32 = 2;
pub type va_list = __BindgenOpaqueArray<u64, 4usize>;
pub type __gnuc_va_list = __BindgenOpaqueArray<u64, 4usize>;
unsafe extern "C" {
    pub fn android_get_application_target_sdk_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn android_get_device_api_level() -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
pub type jboolean = u8;
pub type jbyte = i8;
pub type jchar = u16;
pub type jshort = i16;
pub type jint = i32;
pub type jlong = i64;
pub type jfloat = f32;
pub type jdouble = f64;
pub type jsize = jint;
pub type jobject = *mut ::std::os::raw::c_void;
pub type jclass = jobject;
pub type jstring = jobject;
pub type jarray = jobject;
pub type jobjectArray = jarray;
pub type jbooleanArray = jarray;
pub type jbyteArray = jarray;
pub type jcharArray = jarray;
pub type jshortArray = jarray;
pub type jintArray = jarray;
pub type jlongArray = jarray;
pub type jfloatArray = jarray;
pub type jdoubleArray = jarray;
pub type jthrowable = jobject;
pub type jweak = jobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jfieldID {
    _unused: [u8; 0],
}
pub type jfieldID = *mut _jfieldID;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _jmethodID {
    _unused: [u8; 0],
}
pub type jmethodID = *mut _jmethodID;
#[repr(C)]
#[derive(Copy, Clone)]
pub union jvalue {
    pub z: jboolean,
    pub b: jbyte,
    pub c: jchar,
    pub s: jshort,
    pub i: jint,
    pub j: jlong,
    pub f: jfloat,
    pub d: jdouble,
    pub l: jobject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of jvalue"][::std::mem::size_of::<jvalue>() - 8usize];
    ["Alignment of jvalue"][::std::mem::align_of::<jvalue>() - 8usize];
    ["Offset of field: jvalue::z"][::std::mem::offset_of!(jvalue, z) - 0usize];
    ["Offset of field: jvalue::b"][::std::mem::offset_of!(jvalue, b) - 0usize];
    ["Offset of field: jvalue::c"][::std::mem::offset_of!(jvalue, c) - 0usize];
    ["Offset of field: jvalue::s"][::std::mem::offset_of!(jvalue, s) - 0usize];
    ["Offset of field: jvalue::i"][::std::mem::offset_of!(jvalue, i) - 0usize];
    ["Offset of field: jvalue::j"][::std::mem::offset_of!(jvalue, j) - 0usize];
    ["Offset of field: jvalue::f"][::std::mem::offset_of!(jvalue, f) - 0usize];
    ["Offset of field: jvalue::d"][::std::mem::offset_of!(jvalue, d) - 0usize];
    ["Offset of field: jvalue::l"][::std::mem::offset_of!(jvalue, l) - 0usize];
};
pub const jobjectRefType_JNIInvalidRefType: jobjectRefType = 0;
pub const jobjectRefType_JNILocalRefType: jobjectRefType = 1;
pub const jobjectRefType_JNIGlobalRefType: jobjectRefType = 2;
pub const jobjectRefType_JNIWeakGlobalRefType: jobjectRefType = 3;
pub type jobjectRefType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeMethod {
    pub name: *const ::std::os::raw::c_char,
    pub signature: *const ::std::os::raw::c_char,
    pub fnPtr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JNINativeMethod"][::std::mem::size_of::<JNINativeMethod>() - 24usize];
    ["Alignment of JNINativeMethod"][::std::mem::align_of::<JNINativeMethod>() - 8usize];
    ["Offset of field: JNINativeMethod::name"]
        [::std::mem::offset_of!(JNINativeMethod, name) - 0usize];
    ["Offset of field: JNINativeMethod::signature"]
        [::std::mem::offset_of!(JNINativeMethod, signature) - 8usize];
    ["Offset of field: JNINativeMethod::fnPtr"]
        [::std::mem::offset_of!(JNINativeMethod, fnPtr) - 16usize];
};
pub type C_JNIEnv = *const JNINativeInterface;
pub type JNIEnv = *const JNINativeInterface;
pub type JavaVM = *const JNIInvokeInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNINativeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub reserved3: *mut ::std::os::raw::c_void,
    pub GetVersion: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv) -> jint>,
    pub DefineClass: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: *const ::std::os::raw::c_char,
            arg3: jobject,
            arg4: *const jbyte,
            arg5: jsize,
        ) -> jclass,
    >,
    pub FindClass: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: *const ::std::os::raw::c_char) -> jclass,
    >,
    pub FromReflectedMethod:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jmethodID>,
    pub FromReflectedField:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jfieldID>,
    pub ToReflectedMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: jboolean,
        ) -> jobject,
    >,
    pub GetSuperclass:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass) -> jclass>,
    pub IsAssignableFrom: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jclass) -> jboolean,
    >,
    pub ToReflectedField: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jfieldID,
            arg4: jboolean,
        ) -> jobject,
    >,
    pub Throw:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jthrowable) -> jint>,
    pub ThrowNew: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const ::std::os::raw::c_char,
        ) -> jint,
    >,
    pub ExceptionOccurred:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv) -> jthrowable>,
    pub ExceptionDescribe: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv)>,
    pub ExceptionClear: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv)>,
    pub FatalError: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: *const ::std::os::raw::c_char),
    >,
    pub PushLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jint) -> jint>,
    pub PopLocalFrame:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jobject>,
    pub NewGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jobject>,
    pub DeleteGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject)>,
    pub DeleteLocalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject)>,
    pub IsSameObject: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jobject) -> jboolean,
    >,
    pub NewLocalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jobject>,
    pub EnsureLocalCapacity:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jint) -> jint>,
    pub AllocObject:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass) -> jobject>,
    pub NewObject: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jobject,
    >,
    pub NewObjectV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jobject,
    >,
    pub NewObjectA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jobject,
    >,
    pub GetObjectClass:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jclass>,
    pub IsInstanceOf: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jclass) -> jboolean,
    >,
    pub GetMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jobject,
    >,
    pub CallObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jobject,
    >,
    pub CallObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jobject,
    >,
    pub CallBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jboolean,
    >,
    pub CallBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jboolean,
    >,
    pub CallBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jboolean,
    >,
    pub CallByteMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jbyte,
    >,
    pub CallByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jbyte,
    >,
    pub CallByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jbyte,
    >,
    pub CallCharMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jchar,
    >,
    pub CallCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jchar,
    >,
    pub CallCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jchar,
    >,
    pub CallShortMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jshort,
    >,
    pub CallShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jshort,
    >,
    pub CallShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jshort,
    >,
    pub CallIntMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jint,
    >,
    pub CallIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jint,
    >,
    pub CallIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jint,
    >,
    pub CallLongMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jlong,
    >,
    pub CallLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jlong,
    >,
    pub CallLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jlong,
    >,
    pub CallFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jfloat,
    >,
    pub CallFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jfloat,
    >,
    pub CallFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jfloat,
    >,
    pub CallDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...) -> jdouble,
    >,
    pub CallDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jdouble,
    >,
    pub CallDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jdouble,
    >,
    pub CallVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, ...),
    >,
    pub CallVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jmethodID, arg4: va_list),
    >,
    pub CallVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jmethodID,
            arg4: *const jvalue,
        ),
    >,
    pub CallNonvirtualObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jobject,
    >,
    pub CallNonvirtualObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jobject,
    >,
    pub CallNonvirtualBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jboolean,
    >,
    pub CallNonvirtualBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jboolean,
    >,
    pub CallNonvirtualByteMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jbyte,
    >,
    pub CallNonvirtualByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jbyte,
    >,
    pub CallNonvirtualCharMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jchar,
    >,
    pub CallNonvirtualCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jchar,
    >,
    pub CallNonvirtualShortMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jshort,
    >,
    pub CallNonvirtualShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jshort,
    >,
    pub CallNonvirtualIntMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jint,
    >,
    pub CallNonvirtualIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jint,
    >,
    pub CallNonvirtualLongMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jlong,
    >,
    pub CallNonvirtualLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jlong,
    >,
    pub CallNonvirtualFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jfloat,
    >,
    pub CallNonvirtualFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jfloat,
    >,
    pub CallNonvirtualDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            ...
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ) -> jdouble,
    >,
    pub CallNonvirtualDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ) -> jdouble,
    >,
    pub CallNonvirtualVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jclass, arg4: jmethodID, ...),
    >,
    pub CallNonvirtualVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: va_list,
        ),
    >,
    pub CallNonvirtualVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jobject,
            arg3: jclass,
            arg4: jmethodID,
            arg5: *const jvalue,
        ),
    >,
    pub GetFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetObjectField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jobject,
    >,
    pub GetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jboolean,
    >,
    pub GetByteField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jbyte,
    >,
    pub GetCharField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jchar,
    >,
    pub GetShortField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jshort,
    >,
    pub GetIntField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jint,
    >,
    pub GetLongField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jlong,
    >,
    pub GetFloatField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jfloat,
    >,
    pub GetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID) -> jdouble,
    >,
    pub SetObjectField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jobject),
    >,
    pub SetBooleanField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jboolean),
    >,
    pub SetByteField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jbyte),
    >,
    pub SetCharField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jchar),
    >,
    pub SetShortField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jshort),
    >,
    pub SetIntField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jint),
    >,
    pub SetLongField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jlong),
    >,
    pub SetFloatField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jfloat),
    >,
    pub SetDoubleField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject, arg3: jfieldID, arg4: jdouble),
    >,
    pub GetStaticMethodID: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> jmethodID,
    >,
    pub CallStaticObjectMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jobject,
    >,
    pub CallStaticObjectMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jobject,
    >,
    pub CallStaticObjectMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jobject,
    >,
    pub CallStaticBooleanMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jboolean,
    >,
    pub CallStaticBooleanMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jboolean,
    >,
    pub CallStaticBooleanMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jboolean,
    >,
    pub CallStaticByteMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jbyte,
    >,
    pub CallStaticByteMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jbyte,
    >,
    pub CallStaticByteMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jbyte,
    >,
    pub CallStaticCharMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jchar,
    >,
    pub CallStaticCharMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jchar,
    >,
    pub CallStaticCharMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jchar,
    >,
    pub CallStaticShortMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jshort,
    >,
    pub CallStaticShortMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jshort,
    >,
    pub CallStaticShortMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jshort,
    >,
    pub CallStaticIntMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jint,
    >,
    pub CallStaticIntMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jint,
    >,
    pub CallStaticIntMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jint,
    >,
    pub CallStaticLongMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jlong,
    >,
    pub CallStaticLongMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jlong,
    >,
    pub CallStaticLongMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jlong,
    >,
    pub CallStaticFloatMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jfloat,
    >,
    pub CallStaticFloatMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jfloat,
    >,
    pub CallStaticFloatMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jfloat,
    >,
    pub CallStaticDoubleMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...) -> jdouble,
    >,
    pub CallStaticDoubleMethodV: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: va_list,
        ) -> jdouble,
    >,
    pub CallStaticDoubleMethodA: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: jmethodID,
            arg4: *const jvalue,
        ) -> jdouble,
    >,
    pub CallStaticVoidMethod: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, ...),
    >,
    pub CallStaticVoidMethodV: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, arg4: va_list),
    >,
    pub CallStaticVoidMethodA: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jmethodID, arg4: *const jvalue),
    >,
    pub GetStaticFieldID: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const ::std::os::raw::c_char,
        ) -> jfieldID,
    >,
    pub GetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jobject,
    >,
    pub GetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jboolean,
    >,
    pub GetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jbyte,
    >,
    pub GetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jchar,
    >,
    pub GetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jshort,
    >,
    pub GetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jint,
    >,
    pub GetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jlong,
    >,
    pub GetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jfloat,
    >,
    pub GetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID) -> jdouble,
    >,
    pub SetStaticObjectField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jobject),
    >,
    pub SetStaticBooleanField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jboolean),
    >,
    pub SetStaticByteField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jbyte),
    >,
    pub SetStaticCharField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jchar),
    >,
    pub SetStaticShortField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jshort),
    >,
    pub SetStaticIntField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jint),
    >,
    pub SetStaticLongField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jlong),
    >,
    pub SetStaticFloatField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jfloat),
    >,
    pub SetStaticDoubleField: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass, arg3: jfieldID, arg4: jdouble),
    >,
    pub NewString: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: *const jchar, arg3: jsize) -> jstring,
    >,
    pub GetStringLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring) -> jsize>,
    pub GetStringChars: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring, arg3: *mut jboolean) -> *const jchar,
    >,
    pub ReleaseStringChars: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring, arg3: *const jchar),
    >,
    pub NewStringUTF: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: *const ::std::os::raw::c_char) -> jstring,
    >,
    pub GetStringUTFLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring) -> jsize>,
    pub GetStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jstring,
            arg3: *mut jboolean,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub ReleaseStringUTFChars: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring, arg3: *const ::std::os::raw::c_char),
    >,
    pub GetArrayLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jarray) -> jsize>,
    pub NewObjectArray: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jsize,
            arg3: jclass,
            arg4: jobject,
        ) -> jobjectArray,
    >,
    pub GetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobjectArray, arg3: jsize) -> jobject,
    >,
    pub SetObjectArrayElement: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobjectArray, arg3: jsize, arg4: jobject),
    >,
    pub NewBooleanArray: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jbooleanArray,
    >,
    pub NewByteArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jbyteArray>,
    pub NewCharArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jcharArray>,
    pub NewShortArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jshortArray>,
    pub NewIntArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jintArray>,
    pub NewLongArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jlongArray>,
    pub NewFloatArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jfloatArray>,
    pub NewDoubleArray:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jsize) -> jdoubleArray>,
    pub GetBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbooleanArray,
            arg3: *mut jboolean,
        ) -> *mut jboolean,
    >,
    pub GetByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbyteArray,
            arg3: *mut jboolean,
        ) -> *mut jbyte,
    >,
    pub GetCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jcharArray,
            arg3: *mut jboolean,
        ) -> *mut jchar,
    >,
    pub GetShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jshortArray,
            arg3: *mut jboolean,
        ) -> *mut jshort,
    >,
    pub GetIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jintArray, arg3: *mut jboolean) -> *mut jint,
    >,
    pub GetLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jlongArray,
            arg3: *mut jboolean,
        ) -> *mut jlong,
    >,
    pub GetFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jfloatArray,
            arg3: *mut jboolean,
        ) -> *mut jfloat,
    >,
    pub GetDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jdoubleArray,
            arg3: *mut jboolean,
        ) -> *mut jdouble,
    >,
    pub ReleaseBooleanArrayElements: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbooleanArray,
            arg3: *mut jboolean,
            arg4: jint,
        ),
    >,
    pub ReleaseByteArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jbyteArray, arg3: *mut jbyte, arg4: jint),
    >,
    pub ReleaseCharArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jcharArray, arg3: *mut jchar, arg4: jint),
    >,
    pub ReleaseShortArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jshortArray, arg3: *mut jshort, arg4: jint),
    >,
    pub ReleaseIntArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jintArray, arg3: *mut jint, arg4: jint),
    >,
    pub ReleaseLongArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jlongArray, arg3: *mut jlong, arg4: jint),
    >,
    pub ReleaseFloatArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jfloatArray, arg3: *mut jfloat, arg4: jint),
    >,
    pub ReleaseDoubleArrayElements: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jdoubleArray, arg3: *mut jdouble, arg4: jint),
    >,
    pub GetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbooleanArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jboolean,
        ),
    >,
    pub GetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbyteArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jbyte,
        ),
    >,
    pub GetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jcharArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jchar,
        ),
    >,
    pub GetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jshortArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jshort,
        ),
    >,
    pub GetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jintArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jint,
        ),
    >,
    pub GetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jlongArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jlong,
        ),
    >,
    pub GetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jfloatArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jfloat,
        ),
    >,
    pub GetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jdoubleArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jdouble,
        ),
    >,
    pub SetBooleanArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbooleanArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jboolean,
        ),
    >,
    pub SetByteArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jbyteArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jbyte,
        ),
    >,
    pub SetCharArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jcharArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jchar,
        ),
    >,
    pub SetShortArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jshortArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jshort,
        ),
    >,
    pub SetIntArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jintArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jint,
        ),
    >,
    pub SetLongArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jlongArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jlong,
        ),
    >,
    pub SetFloatArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jfloatArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jfloat,
        ),
    >,
    pub SetDoubleArrayRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jdoubleArray,
            arg3: jsize,
            arg4: jsize,
            arg5: *const jdouble,
        ),
    >,
    pub RegisterNatives: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jclass,
            arg3: *const JNINativeMethod,
            arg4: jint,
        ) -> jint,
    >,
    pub UnregisterNatives:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jclass) -> jint>,
    pub MonitorEnter:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jint>,
    pub MonitorExit:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jint>,
    pub GetJavaVM: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: *mut *mut JavaVM) -> jint,
    >,
    pub GetStringRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jstring,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut jchar,
        ),
    >,
    pub GetStringUTFRegion: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jstring,
            arg3: jsize,
            arg4: jsize,
            arg5: *mut ::std::os::raw::c_char,
        ),
    >,
    pub GetPrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jarray,
            arg3: *mut jboolean,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReleasePrimitiveArrayCritical: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: jarray,
            arg3: *mut ::std::os::raw::c_void,
            arg4: jint,
        ),
    >,
    pub GetStringCritical: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring, arg3: *mut jboolean) -> *const jchar,
    >,
    pub ReleaseStringCritical: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jstring, arg3: *const jchar),
    >,
    pub NewWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jweak>,
    pub DeleteWeakGlobalRef:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jweak)>,
    pub ExceptionCheck: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv) -> jboolean>,
    pub NewDirectByteBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JNIEnv,
            arg2: *mut ::std::os::raw::c_void,
            arg3: jlong,
        ) -> jobject,
    >,
    pub GetDirectBufferAddress: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> *mut ::std::os::raw::c_void,
    >,
    pub GetDirectBufferCapacity:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jlong>,
    pub GetObjectRefType: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut JNIEnv, arg2: jobject) -> jobjectRefType,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JNINativeInterface"][::std::mem::size_of::<JNINativeInterface>() - 1864usize];
    ["Alignment of JNINativeInterface"][::std::mem::align_of::<JNINativeInterface>() - 8usize];
    ["Offset of field: JNINativeInterface::reserved0"]
        [::std::mem::offset_of!(JNINativeInterface, reserved0) - 0usize];
    ["Offset of field: JNINativeInterface::reserved1"]
        [::std::mem::offset_of!(JNINativeInterface, reserved1) - 8usize];
    ["Offset of field: JNINativeInterface::reserved2"]
        [::std::mem::offset_of!(JNINativeInterface, reserved2) - 16usize];
    ["Offset of field: JNINativeInterface::reserved3"]
        [::std::mem::offset_of!(JNINativeInterface, reserved3) - 24usize];
    ["Offset of field: JNINativeInterface::GetVersion"]
        [::std::mem::offset_of!(JNINativeInterface, GetVersion) - 32usize];
    ["Offset of field: JNINativeInterface::DefineClass"]
        [::std::mem::offset_of!(JNINativeInterface, DefineClass) - 40usize];
    ["Offset of field: JNINativeInterface::FindClass"]
        [::std::mem::offset_of!(JNINativeInterface, FindClass) - 48usize];
    ["Offset of field: JNINativeInterface::FromReflectedMethod"]
        [::std::mem::offset_of!(JNINativeInterface, FromReflectedMethod) - 56usize];
    ["Offset of field: JNINativeInterface::FromReflectedField"]
        [::std::mem::offset_of!(JNINativeInterface, FromReflectedField) - 64usize];
    ["Offset of field: JNINativeInterface::ToReflectedMethod"]
        [::std::mem::offset_of!(JNINativeInterface, ToReflectedMethod) - 72usize];
    ["Offset of field: JNINativeInterface::GetSuperclass"]
        [::std::mem::offset_of!(JNINativeInterface, GetSuperclass) - 80usize];
    ["Offset of field: JNINativeInterface::IsAssignableFrom"]
        [::std::mem::offset_of!(JNINativeInterface, IsAssignableFrom) - 88usize];
    ["Offset of field: JNINativeInterface::ToReflectedField"]
        [::std::mem::offset_of!(JNINativeInterface, ToReflectedField) - 96usize];
    ["Offset of field: JNINativeInterface::Throw"]
        [::std::mem::offset_of!(JNINativeInterface, Throw) - 104usize];
    ["Offset of field: JNINativeInterface::ThrowNew"]
        [::std::mem::offset_of!(JNINativeInterface, ThrowNew) - 112usize];
    ["Offset of field: JNINativeInterface::ExceptionOccurred"]
        [::std::mem::offset_of!(JNINativeInterface, ExceptionOccurred) - 120usize];
    ["Offset of field: JNINativeInterface::ExceptionDescribe"]
        [::std::mem::offset_of!(JNINativeInterface, ExceptionDescribe) - 128usize];
    ["Offset of field: JNINativeInterface::ExceptionClear"]
        [::std::mem::offset_of!(JNINativeInterface, ExceptionClear) - 136usize];
    ["Offset of field: JNINativeInterface::FatalError"]
        [::std::mem::offset_of!(JNINativeInterface, FatalError) - 144usize];
    ["Offset of field: JNINativeInterface::PushLocalFrame"]
        [::std::mem::offset_of!(JNINativeInterface, PushLocalFrame) - 152usize];
    ["Offset of field: JNINativeInterface::PopLocalFrame"]
        [::std::mem::offset_of!(JNINativeInterface, PopLocalFrame) - 160usize];
    ["Offset of field: JNINativeInterface::NewGlobalRef"]
        [::std::mem::offset_of!(JNINativeInterface, NewGlobalRef) - 168usize];
    ["Offset of field: JNINativeInterface::DeleteGlobalRef"]
        [::std::mem::offset_of!(JNINativeInterface, DeleteGlobalRef) - 176usize];
    ["Offset of field: JNINativeInterface::DeleteLocalRef"]
        [::std::mem::offset_of!(JNINativeInterface, DeleteLocalRef) - 184usize];
    ["Offset of field: JNINativeInterface::IsSameObject"]
        [::std::mem::offset_of!(JNINativeInterface, IsSameObject) - 192usize];
    ["Offset of field: JNINativeInterface::NewLocalRef"]
        [::std::mem::offset_of!(JNINativeInterface, NewLocalRef) - 200usize];
    ["Offset of field: JNINativeInterface::EnsureLocalCapacity"]
        [::std::mem::offset_of!(JNINativeInterface, EnsureLocalCapacity) - 208usize];
    ["Offset of field: JNINativeInterface::AllocObject"]
        [::std::mem::offset_of!(JNINativeInterface, AllocObject) - 216usize];
    ["Offset of field: JNINativeInterface::NewObject"]
        [::std::mem::offset_of!(JNINativeInterface, NewObject) - 224usize];
    ["Offset of field: JNINativeInterface::NewObjectV"]
        [::std::mem::offset_of!(JNINativeInterface, NewObjectV) - 232usize];
    ["Offset of field: JNINativeInterface::NewObjectA"]
        [::std::mem::offset_of!(JNINativeInterface, NewObjectA) - 240usize];
    ["Offset of field: JNINativeInterface::GetObjectClass"]
        [::std::mem::offset_of!(JNINativeInterface, GetObjectClass) - 248usize];
    ["Offset of field: JNINativeInterface::IsInstanceOf"]
        [::std::mem::offset_of!(JNINativeInterface, IsInstanceOf) - 256usize];
    ["Offset of field: JNINativeInterface::GetMethodID"]
        [::std::mem::offset_of!(JNINativeInterface, GetMethodID) - 264usize];
    ["Offset of field: JNINativeInterface::CallObjectMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallObjectMethod) - 272usize];
    ["Offset of field: JNINativeInterface::CallObjectMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallObjectMethodV) - 280usize];
    ["Offset of field: JNINativeInterface::CallObjectMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallObjectMethodA) - 288usize];
    ["Offset of field: JNINativeInterface::CallBooleanMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallBooleanMethod) - 296usize];
    ["Offset of field: JNINativeInterface::CallBooleanMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallBooleanMethodV) - 304usize];
    ["Offset of field: JNINativeInterface::CallBooleanMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallBooleanMethodA) - 312usize];
    ["Offset of field: JNINativeInterface::CallByteMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallByteMethod) - 320usize];
    ["Offset of field: JNINativeInterface::CallByteMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallByteMethodV) - 328usize];
    ["Offset of field: JNINativeInterface::CallByteMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallByteMethodA) - 336usize];
    ["Offset of field: JNINativeInterface::CallCharMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallCharMethod) - 344usize];
    ["Offset of field: JNINativeInterface::CallCharMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallCharMethodV) - 352usize];
    ["Offset of field: JNINativeInterface::CallCharMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallCharMethodA) - 360usize];
    ["Offset of field: JNINativeInterface::CallShortMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallShortMethod) - 368usize];
    ["Offset of field: JNINativeInterface::CallShortMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallShortMethodV) - 376usize];
    ["Offset of field: JNINativeInterface::CallShortMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallShortMethodA) - 384usize];
    ["Offset of field: JNINativeInterface::CallIntMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallIntMethod) - 392usize];
    ["Offset of field: JNINativeInterface::CallIntMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallIntMethodV) - 400usize];
    ["Offset of field: JNINativeInterface::CallIntMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallIntMethodA) - 408usize];
    ["Offset of field: JNINativeInterface::CallLongMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallLongMethod) - 416usize];
    ["Offset of field: JNINativeInterface::CallLongMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallLongMethodV) - 424usize];
    ["Offset of field: JNINativeInterface::CallLongMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallLongMethodA) - 432usize];
    ["Offset of field: JNINativeInterface::CallFloatMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallFloatMethod) - 440usize];
    ["Offset of field: JNINativeInterface::CallFloatMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallFloatMethodV) - 448usize];
    ["Offset of field: JNINativeInterface::CallFloatMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallFloatMethodA) - 456usize];
    ["Offset of field: JNINativeInterface::CallDoubleMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallDoubleMethod) - 464usize];
    ["Offset of field: JNINativeInterface::CallDoubleMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallDoubleMethodV) - 472usize];
    ["Offset of field: JNINativeInterface::CallDoubleMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallDoubleMethodA) - 480usize];
    ["Offset of field: JNINativeInterface::CallVoidMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallVoidMethod) - 488usize];
    ["Offset of field: JNINativeInterface::CallVoidMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallVoidMethodV) - 496usize];
    ["Offset of field: JNINativeInterface::CallVoidMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallVoidMethodA) - 504usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualObjectMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualObjectMethod) - 512usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualObjectMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualObjectMethodV) - 520usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualObjectMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualObjectMethodA) - 528usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualBooleanMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualBooleanMethod) - 536usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualBooleanMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualBooleanMethodV) - 544usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualBooleanMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualBooleanMethodA) - 552usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualByteMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualByteMethod) - 560usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualByteMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualByteMethodV) - 568usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualByteMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualByteMethodA) - 576usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualCharMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualCharMethod) - 584usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualCharMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualCharMethodV) - 592usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualCharMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualCharMethodA) - 600usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualShortMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualShortMethod) - 608usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualShortMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualShortMethodV) - 616usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualShortMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualShortMethodA) - 624usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualIntMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualIntMethod) - 632usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualIntMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualIntMethodV) - 640usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualIntMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualIntMethodA) - 648usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualLongMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualLongMethod) - 656usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualLongMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualLongMethodV) - 664usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualLongMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualLongMethodA) - 672usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualFloatMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualFloatMethod) - 680usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualFloatMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualFloatMethodV) - 688usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualFloatMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualFloatMethodA) - 696usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualDoubleMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualDoubleMethod) - 704usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualDoubleMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualDoubleMethodV) - 712usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualDoubleMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualDoubleMethodA) - 720usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualVoidMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualVoidMethod) - 728usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualVoidMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualVoidMethodV) - 736usize];
    ["Offset of field: JNINativeInterface::CallNonvirtualVoidMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallNonvirtualVoidMethodA) - 744usize];
    ["Offset of field: JNINativeInterface::GetFieldID"]
        [::std::mem::offset_of!(JNINativeInterface, GetFieldID) - 752usize];
    ["Offset of field: JNINativeInterface::GetObjectField"]
        [::std::mem::offset_of!(JNINativeInterface, GetObjectField) - 760usize];
    ["Offset of field: JNINativeInterface::GetBooleanField"]
        [::std::mem::offset_of!(JNINativeInterface, GetBooleanField) - 768usize];
    ["Offset of field: JNINativeInterface::GetByteField"]
        [::std::mem::offset_of!(JNINativeInterface, GetByteField) - 776usize];
    ["Offset of field: JNINativeInterface::GetCharField"]
        [::std::mem::offset_of!(JNINativeInterface, GetCharField) - 784usize];
    ["Offset of field: JNINativeInterface::GetShortField"]
        [::std::mem::offset_of!(JNINativeInterface, GetShortField) - 792usize];
    ["Offset of field: JNINativeInterface::GetIntField"]
        [::std::mem::offset_of!(JNINativeInterface, GetIntField) - 800usize];
    ["Offset of field: JNINativeInterface::GetLongField"]
        [::std::mem::offset_of!(JNINativeInterface, GetLongField) - 808usize];
    ["Offset of field: JNINativeInterface::GetFloatField"]
        [::std::mem::offset_of!(JNINativeInterface, GetFloatField) - 816usize];
    ["Offset of field: JNINativeInterface::GetDoubleField"]
        [::std::mem::offset_of!(JNINativeInterface, GetDoubleField) - 824usize];
    ["Offset of field: JNINativeInterface::SetObjectField"]
        [::std::mem::offset_of!(JNINativeInterface, SetObjectField) - 832usize];
    ["Offset of field: JNINativeInterface::SetBooleanField"]
        [::std::mem::offset_of!(JNINativeInterface, SetBooleanField) - 840usize];
    ["Offset of field: JNINativeInterface::SetByteField"]
        [::std::mem::offset_of!(JNINativeInterface, SetByteField) - 848usize];
    ["Offset of field: JNINativeInterface::SetCharField"]
        [::std::mem::offset_of!(JNINativeInterface, SetCharField) - 856usize];
    ["Offset of field: JNINativeInterface::SetShortField"]
        [::std::mem::offset_of!(JNINativeInterface, SetShortField) - 864usize];
    ["Offset of field: JNINativeInterface::SetIntField"]
        [::std::mem::offset_of!(JNINativeInterface, SetIntField) - 872usize];
    ["Offset of field: JNINativeInterface::SetLongField"]
        [::std::mem::offset_of!(JNINativeInterface, SetLongField) - 880usize];
    ["Offset of field: JNINativeInterface::SetFloatField"]
        [::std::mem::offset_of!(JNINativeInterface, SetFloatField) - 888usize];
    ["Offset of field: JNINativeInterface::SetDoubleField"]
        [::std::mem::offset_of!(JNINativeInterface, SetDoubleField) - 896usize];
    ["Offset of field: JNINativeInterface::GetStaticMethodID"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticMethodID) - 904usize];
    ["Offset of field: JNINativeInterface::CallStaticObjectMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticObjectMethod) - 912usize];
    ["Offset of field: JNINativeInterface::CallStaticObjectMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticObjectMethodV) - 920usize];
    ["Offset of field: JNINativeInterface::CallStaticObjectMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticObjectMethodA) - 928usize];
    ["Offset of field: JNINativeInterface::CallStaticBooleanMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticBooleanMethod) - 936usize];
    ["Offset of field: JNINativeInterface::CallStaticBooleanMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticBooleanMethodV) - 944usize];
    ["Offset of field: JNINativeInterface::CallStaticBooleanMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticBooleanMethodA) - 952usize];
    ["Offset of field: JNINativeInterface::CallStaticByteMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticByteMethod) - 960usize];
    ["Offset of field: JNINativeInterface::CallStaticByteMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticByteMethodV) - 968usize];
    ["Offset of field: JNINativeInterface::CallStaticByteMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticByteMethodA) - 976usize];
    ["Offset of field: JNINativeInterface::CallStaticCharMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticCharMethod) - 984usize];
    ["Offset of field: JNINativeInterface::CallStaticCharMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticCharMethodV) - 992usize];
    ["Offset of field: JNINativeInterface::CallStaticCharMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticCharMethodA) - 1000usize];
    ["Offset of field: JNINativeInterface::CallStaticShortMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticShortMethod) - 1008usize];
    ["Offset of field: JNINativeInterface::CallStaticShortMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticShortMethodV) - 1016usize];
    ["Offset of field: JNINativeInterface::CallStaticShortMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticShortMethodA) - 1024usize];
    ["Offset of field: JNINativeInterface::CallStaticIntMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticIntMethod) - 1032usize];
    ["Offset of field: JNINativeInterface::CallStaticIntMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticIntMethodV) - 1040usize];
    ["Offset of field: JNINativeInterface::CallStaticIntMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticIntMethodA) - 1048usize];
    ["Offset of field: JNINativeInterface::CallStaticLongMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticLongMethod) - 1056usize];
    ["Offset of field: JNINativeInterface::CallStaticLongMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticLongMethodV) - 1064usize];
    ["Offset of field: JNINativeInterface::CallStaticLongMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticLongMethodA) - 1072usize];
    ["Offset of field: JNINativeInterface::CallStaticFloatMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticFloatMethod) - 1080usize];
    ["Offset of field: JNINativeInterface::CallStaticFloatMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticFloatMethodV) - 1088usize];
    ["Offset of field: JNINativeInterface::CallStaticFloatMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticFloatMethodA) - 1096usize];
    ["Offset of field: JNINativeInterface::CallStaticDoubleMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticDoubleMethod) - 1104usize];
    ["Offset of field: JNINativeInterface::CallStaticDoubleMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticDoubleMethodV) - 1112usize];
    ["Offset of field: JNINativeInterface::CallStaticDoubleMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticDoubleMethodA) - 1120usize];
    ["Offset of field: JNINativeInterface::CallStaticVoidMethod"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticVoidMethod) - 1128usize];
    ["Offset of field: JNINativeInterface::CallStaticVoidMethodV"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticVoidMethodV) - 1136usize];
    ["Offset of field: JNINativeInterface::CallStaticVoidMethodA"]
        [::std::mem::offset_of!(JNINativeInterface, CallStaticVoidMethodA) - 1144usize];
    ["Offset of field: JNINativeInterface::GetStaticFieldID"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticFieldID) - 1152usize];
    ["Offset of field: JNINativeInterface::GetStaticObjectField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticObjectField) - 1160usize];
    ["Offset of field: JNINativeInterface::GetStaticBooleanField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticBooleanField) - 1168usize];
    ["Offset of field: JNINativeInterface::GetStaticByteField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticByteField) - 1176usize];
    ["Offset of field: JNINativeInterface::GetStaticCharField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticCharField) - 1184usize];
    ["Offset of field: JNINativeInterface::GetStaticShortField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticShortField) - 1192usize];
    ["Offset of field: JNINativeInterface::GetStaticIntField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticIntField) - 1200usize];
    ["Offset of field: JNINativeInterface::GetStaticLongField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticLongField) - 1208usize];
    ["Offset of field: JNINativeInterface::GetStaticFloatField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticFloatField) - 1216usize];
    ["Offset of field: JNINativeInterface::GetStaticDoubleField"]
        [::std::mem::offset_of!(JNINativeInterface, GetStaticDoubleField) - 1224usize];
    ["Offset of field: JNINativeInterface::SetStaticObjectField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticObjectField) - 1232usize];
    ["Offset of field: JNINativeInterface::SetStaticBooleanField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticBooleanField) - 1240usize];
    ["Offset of field: JNINativeInterface::SetStaticByteField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticByteField) - 1248usize];
    ["Offset of field: JNINativeInterface::SetStaticCharField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticCharField) - 1256usize];
    ["Offset of field: JNINativeInterface::SetStaticShortField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticShortField) - 1264usize];
    ["Offset of field: JNINativeInterface::SetStaticIntField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticIntField) - 1272usize];
    ["Offset of field: JNINativeInterface::SetStaticLongField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticLongField) - 1280usize];
    ["Offset of field: JNINativeInterface::SetStaticFloatField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticFloatField) - 1288usize];
    ["Offset of field: JNINativeInterface::SetStaticDoubleField"]
        [::std::mem::offset_of!(JNINativeInterface, SetStaticDoubleField) - 1296usize];
    ["Offset of field: JNINativeInterface::NewString"]
        [::std::mem::offset_of!(JNINativeInterface, NewString) - 1304usize];
    ["Offset of field: JNINativeInterface::GetStringLength"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringLength) - 1312usize];
    ["Offset of field: JNINativeInterface::GetStringChars"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringChars) - 1320usize];
    ["Offset of field: JNINativeInterface::ReleaseStringChars"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseStringChars) - 1328usize];
    ["Offset of field: JNINativeInterface::NewStringUTF"]
        [::std::mem::offset_of!(JNINativeInterface, NewStringUTF) - 1336usize];
    ["Offset of field: JNINativeInterface::GetStringUTFLength"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringUTFLength) - 1344usize];
    ["Offset of field: JNINativeInterface::GetStringUTFChars"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringUTFChars) - 1352usize];
    ["Offset of field: JNINativeInterface::ReleaseStringUTFChars"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseStringUTFChars) - 1360usize];
    ["Offset of field: JNINativeInterface::GetArrayLength"]
        [::std::mem::offset_of!(JNINativeInterface, GetArrayLength) - 1368usize];
    ["Offset of field: JNINativeInterface::NewObjectArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewObjectArray) - 1376usize];
    ["Offset of field: JNINativeInterface::GetObjectArrayElement"]
        [::std::mem::offset_of!(JNINativeInterface, GetObjectArrayElement) - 1384usize];
    ["Offset of field: JNINativeInterface::SetObjectArrayElement"]
        [::std::mem::offset_of!(JNINativeInterface, SetObjectArrayElement) - 1392usize];
    ["Offset of field: JNINativeInterface::NewBooleanArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewBooleanArray) - 1400usize];
    ["Offset of field: JNINativeInterface::NewByteArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewByteArray) - 1408usize];
    ["Offset of field: JNINativeInterface::NewCharArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewCharArray) - 1416usize];
    ["Offset of field: JNINativeInterface::NewShortArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewShortArray) - 1424usize];
    ["Offset of field: JNINativeInterface::NewIntArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewIntArray) - 1432usize];
    ["Offset of field: JNINativeInterface::NewLongArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewLongArray) - 1440usize];
    ["Offset of field: JNINativeInterface::NewFloatArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewFloatArray) - 1448usize];
    ["Offset of field: JNINativeInterface::NewDoubleArray"]
        [::std::mem::offset_of!(JNINativeInterface, NewDoubleArray) - 1456usize];
    ["Offset of field: JNINativeInterface::GetBooleanArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetBooleanArrayElements) - 1464usize];
    ["Offset of field: JNINativeInterface::GetByteArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetByteArrayElements) - 1472usize];
    ["Offset of field: JNINativeInterface::GetCharArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetCharArrayElements) - 1480usize];
    ["Offset of field: JNINativeInterface::GetShortArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetShortArrayElements) - 1488usize];
    ["Offset of field: JNINativeInterface::GetIntArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetIntArrayElements) - 1496usize];
    ["Offset of field: JNINativeInterface::GetLongArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetLongArrayElements) - 1504usize];
    ["Offset of field: JNINativeInterface::GetFloatArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetFloatArrayElements) - 1512usize];
    ["Offset of field: JNINativeInterface::GetDoubleArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, GetDoubleArrayElements) - 1520usize];
    ["Offset of field: JNINativeInterface::ReleaseBooleanArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseBooleanArrayElements) - 1528usize];
    ["Offset of field: JNINativeInterface::ReleaseByteArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseByteArrayElements) - 1536usize];
    ["Offset of field: JNINativeInterface::ReleaseCharArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseCharArrayElements) - 1544usize];
    ["Offset of field: JNINativeInterface::ReleaseShortArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseShortArrayElements) - 1552usize];
    ["Offset of field: JNINativeInterface::ReleaseIntArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseIntArrayElements) - 1560usize];
    ["Offset of field: JNINativeInterface::ReleaseLongArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseLongArrayElements) - 1568usize];
    ["Offset of field: JNINativeInterface::ReleaseFloatArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseFloatArrayElements) - 1576usize];
    ["Offset of field: JNINativeInterface::ReleaseDoubleArrayElements"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseDoubleArrayElements) - 1584usize];
    ["Offset of field: JNINativeInterface::GetBooleanArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetBooleanArrayRegion) - 1592usize];
    ["Offset of field: JNINativeInterface::GetByteArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetByteArrayRegion) - 1600usize];
    ["Offset of field: JNINativeInterface::GetCharArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetCharArrayRegion) - 1608usize];
    ["Offset of field: JNINativeInterface::GetShortArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetShortArrayRegion) - 1616usize];
    ["Offset of field: JNINativeInterface::GetIntArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetIntArrayRegion) - 1624usize];
    ["Offset of field: JNINativeInterface::GetLongArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetLongArrayRegion) - 1632usize];
    ["Offset of field: JNINativeInterface::GetFloatArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetFloatArrayRegion) - 1640usize];
    ["Offset of field: JNINativeInterface::GetDoubleArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetDoubleArrayRegion) - 1648usize];
    ["Offset of field: JNINativeInterface::SetBooleanArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetBooleanArrayRegion) - 1656usize];
    ["Offset of field: JNINativeInterface::SetByteArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetByteArrayRegion) - 1664usize];
    ["Offset of field: JNINativeInterface::SetCharArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetCharArrayRegion) - 1672usize];
    ["Offset of field: JNINativeInterface::SetShortArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetShortArrayRegion) - 1680usize];
    ["Offset of field: JNINativeInterface::SetIntArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetIntArrayRegion) - 1688usize];
    ["Offset of field: JNINativeInterface::SetLongArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetLongArrayRegion) - 1696usize];
    ["Offset of field: JNINativeInterface::SetFloatArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetFloatArrayRegion) - 1704usize];
    ["Offset of field: JNINativeInterface::SetDoubleArrayRegion"]
        [::std::mem::offset_of!(JNINativeInterface, SetDoubleArrayRegion) - 1712usize];
    ["Offset of field: JNINativeInterface::RegisterNatives"]
        [::std::mem::offset_of!(JNINativeInterface, RegisterNatives) - 1720usize];
    ["Offset of field: JNINativeInterface::UnregisterNatives"]
        [::std::mem::offset_of!(JNINativeInterface, UnregisterNatives) - 1728usize];
    ["Offset of field: JNINativeInterface::MonitorEnter"]
        [::std::mem::offset_of!(JNINativeInterface, MonitorEnter) - 1736usize];
    ["Offset of field: JNINativeInterface::MonitorExit"]
        [::std::mem::offset_of!(JNINativeInterface, MonitorExit) - 1744usize];
    ["Offset of field: JNINativeInterface::GetJavaVM"]
        [::std::mem::offset_of!(JNINativeInterface, GetJavaVM) - 1752usize];
    ["Offset of field: JNINativeInterface::GetStringRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringRegion) - 1760usize];
    ["Offset of field: JNINativeInterface::GetStringUTFRegion"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringUTFRegion) - 1768usize];
    ["Offset of field: JNINativeInterface::GetPrimitiveArrayCritical"]
        [::std::mem::offset_of!(JNINativeInterface, GetPrimitiveArrayCritical) - 1776usize];
    ["Offset of field: JNINativeInterface::ReleasePrimitiveArrayCritical"]
        [::std::mem::offset_of!(JNINativeInterface, ReleasePrimitiveArrayCritical) - 1784usize];
    ["Offset of field: JNINativeInterface::GetStringCritical"]
        [::std::mem::offset_of!(JNINativeInterface, GetStringCritical) - 1792usize];
    ["Offset of field: JNINativeInterface::ReleaseStringCritical"]
        [::std::mem::offset_of!(JNINativeInterface, ReleaseStringCritical) - 1800usize];
    ["Offset of field: JNINativeInterface::NewWeakGlobalRef"]
        [::std::mem::offset_of!(JNINativeInterface, NewWeakGlobalRef) - 1808usize];
    ["Offset of field: JNINativeInterface::DeleteWeakGlobalRef"]
        [::std::mem::offset_of!(JNINativeInterface, DeleteWeakGlobalRef) - 1816usize];
    ["Offset of field: JNINativeInterface::ExceptionCheck"]
        [::std::mem::offset_of!(JNINativeInterface, ExceptionCheck) - 1824usize];
    ["Offset of field: JNINativeInterface::NewDirectByteBuffer"]
        [::std::mem::offset_of!(JNINativeInterface, NewDirectByteBuffer) - 1832usize];
    ["Offset of field: JNINativeInterface::GetDirectBufferAddress"]
        [::std::mem::offset_of!(JNINativeInterface, GetDirectBufferAddress) - 1840usize];
    ["Offset of field: JNINativeInterface::GetDirectBufferCapacity"]
        [::std::mem::offset_of!(JNINativeInterface, GetDirectBufferCapacity) - 1848usize];
    ["Offset of field: JNINativeInterface::GetObjectRefType"]
        [::std::mem::offset_of!(JNINativeInterface, GetObjectRefType) - 1856usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JNIEnv {
    pub functions: *const JNINativeInterface,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JNIEnv"][::std::mem::size_of::<_JNIEnv>() - 8usize];
    ["Alignment of _JNIEnv"][::std::mem::align_of::<_JNIEnv>() - 8usize];
    ["Offset of field: _JNIEnv::functions"][::std::mem::offset_of!(_JNIEnv, functions) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JNIInvokeInterface {
    pub reserved0: *mut ::std::os::raw::c_void,
    pub reserved1: *mut ::std::os::raw::c_void,
    pub reserved2: *mut ::std::os::raw::c_void,
    pub DestroyJavaVM: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JavaVM) -> jint>,
    pub AttachCurrentThread: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JavaVM,
            arg2: *mut *mut JNIEnv,
            arg3: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
    pub DetachCurrentThread: ::std::option::Option<unsafe extern "C" fn(arg1: *mut JavaVM) -> jint>,
    pub GetEnv: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JavaVM,
            arg2: *mut *mut ::std::os::raw::c_void,
            arg3: jint,
        ) -> jint,
    >,
    pub AttachCurrentThreadAsDaemon: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut JavaVM,
            arg2: *mut *mut JNIEnv,
            arg3: *mut ::std::os::raw::c_void,
        ) -> jint,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JNIInvokeInterface"][::std::mem::size_of::<JNIInvokeInterface>() - 64usize];
    ["Alignment of JNIInvokeInterface"][::std::mem::align_of::<JNIInvokeInterface>() - 8usize];
    ["Offset of field: JNIInvokeInterface::reserved0"]
        [::std::mem::offset_of!(JNIInvokeInterface, reserved0) - 0usize];
    ["Offset of field: JNIInvokeInterface::reserved1"]
        [::std::mem::offset_of!(JNIInvokeInterface, reserved1) - 8usize];
    ["Offset of field: JNIInvokeInterface::reserved2"]
        [::std::mem::offset_of!(JNIInvokeInterface, reserved2) - 16usize];
    ["Offset of field: JNIInvokeInterface::DestroyJavaVM"]
        [::std::mem::offset_of!(JNIInvokeInterface, DestroyJavaVM) - 24usize];
    ["Offset of field: JNIInvokeInterface::AttachCurrentThread"]
        [::std::mem::offset_of!(JNIInvokeInterface, AttachCurrentThread) - 32usize];
    ["Offset of field: JNIInvokeInterface::DetachCurrentThread"]
        [::std::mem::offset_of!(JNIInvokeInterface, DetachCurrentThread) - 40usize];
    ["Offset of field: JNIInvokeInterface::GetEnv"]
        [::std::mem::offset_of!(JNIInvokeInterface, GetEnv) - 48usize];
    ["Offset of field: JNIInvokeInterface::AttachCurrentThreadAsDaemon"]
        [::std::mem::offset_of!(JNIInvokeInterface, AttachCurrentThreadAsDaemon) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JavaVM {
    pub functions: *const JNIInvokeInterface,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _JavaVM"][::std::mem::size_of::<_JavaVM>() - 8usize];
    ["Alignment of _JavaVM"][::std::mem::align_of::<_JavaVM>() - 8usize];
    ["Offset of field: _JavaVM::functions"][::std::mem::offset_of!(_JavaVM, functions) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMAttachArgs {
    pub version: jint,
    pub name: *const ::std::os::raw::c_char,
    pub group: jobject,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JavaVMAttachArgs"][::std::mem::size_of::<JavaVMAttachArgs>() - 24usize];
    ["Alignment of JavaVMAttachArgs"][::std::mem::align_of::<JavaVMAttachArgs>() - 8usize];
    ["Offset of field: JavaVMAttachArgs::version"]
        [::std::mem::offset_of!(JavaVMAttachArgs, version) - 0usize];
    ["Offset of field: JavaVMAttachArgs::name"]
        [::std::mem::offset_of!(JavaVMAttachArgs, name) - 8usize];
    ["Offset of field: JavaVMAttachArgs::group"]
        [::std::mem::offset_of!(JavaVMAttachArgs, group) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMOption {
    pub optionString: *const ::std::os::raw::c_char,
    pub extraInfo: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JavaVMOption"][::std::mem::size_of::<JavaVMOption>() - 16usize];
    ["Alignment of JavaVMOption"][::std::mem::align_of::<JavaVMOption>() - 8usize];
    ["Offset of field: JavaVMOption::optionString"]
        [::std::mem::offset_of!(JavaVMOption, optionString) - 0usize];
    ["Offset of field: JavaVMOption::extraInfo"]
        [::std::mem::offset_of!(JavaVMOption, extraInfo) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JavaVMInitArgs {
    pub version: jint,
    pub nOptions: jint,
    pub options: *mut JavaVMOption,
    pub ignoreUnrecognized: jboolean,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of JavaVMInitArgs"][::std::mem::size_of::<JavaVMInitArgs>() - 24usize];
    ["Alignment of JavaVMInitArgs"][::std::mem::align_of::<JavaVMInitArgs>() - 8usize];
    ["Offset of field: JavaVMInitArgs::version"]
        [::std::mem::offset_of!(JavaVMInitArgs, version) - 0usize];
    ["Offset of field: JavaVMInitArgs::nOptions"]
        [::std::mem::offset_of!(JavaVMInitArgs, nOptions) - 4usize];
    ["Offset of field: JavaVMInitArgs::options"]
        [::std::mem::offset_of!(JavaVMInitArgs, options) - 8usize];
    ["Offset of field: JavaVMInitArgs::ignoreUnrecognized"]
        [::std::mem::offset_of!(JavaVMInitArgs, ignoreUnrecognized) - 16usize];
};
unsafe extern "C" {
    pub fn JNI_GetDefaultJavaVMInitArgs(arg1: *mut ::std::os::raw::c_void) -> jint;
}
unsafe extern "C" {
    pub fn JNI_CreateJavaVM(
        arg1: *mut *mut JavaVM,
        arg2: *mut *mut JNIEnv,
        arg3: *mut ::std::os::raw::c_void,
    ) -> jint;
}
unsafe extern "C" {
    pub fn JNI_GetCreatedJavaVMs(arg1: *mut *mut JavaVM, arg2: jsize, arg3: *mut jsize) -> jint;
}
unsafe extern "C" {
    pub fn JNI_OnLoad(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void) -> jint;
}
unsafe extern "C" {
    pub fn JNI_OnUnload(vm: *mut JavaVM, reserved: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CModInfo {
    pub id: *const ::std::os::raw::c_char,
    pub version: *const ::std::os::raw::c_char,
    pub version_long: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CModInfo"][::std::mem::size_of::<CModInfo>() - 24usize];
    ["Alignment of CModInfo"][::std::mem::align_of::<CModInfo>() - 8usize];
    ["Offset of field: CModInfo::id"][::std::mem::offset_of!(CModInfo, id) - 0usize];
    ["Offset of field: CModInfo::version"][::std::mem::offset_of!(CModInfo, version) - 8usize];
    ["Offset of field: CModInfo::version_long"]
        [::std::mem::offset_of!(CModInfo, version_long) - 16usize];
};
pub const CMatchType_MatchType_Strict: CMatchType = 0;
pub const CMatchType_MatchType_IdOnly: CMatchType = 1;
pub const CMatchType_MatchType_IdVersion: CMatchType = 2;
pub const CMatchType_MatchType_IdVersionLong: CMatchType = 3;
pub const CMatchType_MatchType_ObjectName: CMatchType = 4;
pub type CMatchType = ::std::os::raw::c_uint;
pub const CLoadPhase_LoadPhase_None: CLoadPhase = 0;
pub const CLoadPhase_LoadPhase_Libs: CLoadPhase = 1;
pub const CLoadPhase_LoadPhase_EarlyMods: CLoadPhase = 2;
pub const CLoadPhase_LoadPhase_Mods: CLoadPhase = 3;
pub type CLoadPhase = ::std::os::raw::c_uint;
pub const CLoadResult_LoadResult_NotFound: CLoadResult = 0;
pub const CLoadResult_LoadResult_Failed: CLoadResult = 1;
pub const CLoadResult_MatchType_Loaded: CLoadResult = 2;
pub type CLoadResult = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CModResult {
    pub info: CModInfo,
    pub path: *const ::std::os::raw::c_char,
    pub handle: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CModResult"][::std::mem::size_of::<CModResult>() - 40usize];
    ["Alignment of CModResult"][::std::mem::align_of::<CModResult>() - 8usize];
    ["Offset of field: CModResult::info"][::std::mem::offset_of!(CModResult, info) - 0usize];
    ["Offset of field: CModResult::path"][::std::mem::offset_of!(CModResult, path) - 24usize];
    ["Offset of field: CModResult::handle"][::std::mem::offset_of!(CModResult, handle) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CModResults {
    pub array: *mut CModResult,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CModResults"][::std::mem::size_of::<CModResults>() - 16usize];
    ["Alignment of CModResults"][::std::mem::align_of::<CModResults>() - 8usize];
    ["Offset of field: CModResults::array"][::std::mem::offset_of!(CModResults, array) - 0usize];
    ["Offset of field: CModResults::size"][::std::mem::offset_of!(CModResults, size) - 8usize];
};
unsafe extern "C" {
    #[doc = " @brief Returns true if the modloader failed to copy over the libs/mods to load, false otherwise"]
    pub fn modloader_get_failed() -> bool;
}
unsafe extern "C" {
    #[doc = " @brief The captured pointer to the JavaVM"]
    pub static mut modloader_jvm: *mut JavaVM;
}
unsafe extern "C" {
    #[doc = " @brief The captured dlopen-d libil2cpp.so handle"]
    pub static mut modloader_libil2cpp_handle: *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " @brief The captured dlopen-d libunity.so handle"]
    pub static mut modloader_unity_handle: *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    #[doc = " @brief True if libs have been dlopened"]
    pub static mut libs_opened: bool;
}
unsafe extern "C" {
    #[doc = " @brief True if early mods have been opened"]
    pub static mut early_mods_opened: bool;
}
unsafe extern "C" {
    #[doc = " @brief True if late mods have been opened"]
    pub static mut late_mods_opened: bool;
}
unsafe extern "C" {
    #[doc = " @brief Current loading phase being invoked. This is not mutated after the phase is done."]
    pub static mut current_load_phase: CLoadPhase;
}
unsafe extern "C" {
    #[doc = " @brief Returns the path of the modloader.\n Example output: /data/user/0/com.beatgames.beatsaber/files/libsl2.so"]
    pub fn modloader_get_path() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the root load path for searches.\n Example output: /sdcard/ModData/com.beatgames.beatsaber/Modloader"]
    pub fn modloader_get_root_load_path() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the path to the files directory\n Example output: /data/user/0/com.beatgames.beatsaber/files"]
    pub fn modloader_get_files_dir() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the path to the external folder\n Example output: /storage/emulated/0/Android/data/com.beatgames.beatsaber/files"]
    pub fn modloader_get_external_dir() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the application ID\n Example output: com.beatgames.beatsaber"]
    pub fn modloader_get_application_id() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the path where the modloader was found from\n Example output: /sdcard/ModData/com.beatgames.beatsaber/Modloader/libsl2.so"]
    pub fn modloader_get_source_path() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Returns the path where libil2cpp.so is located and dlopened from\n Example output:"]
    pub fn modloader_get_libil2cpp_path() -> *const ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[doc = " @brief Finds the mod result for the id\n @return CModResult describing the found mod. Handle will be null if not found"]
    pub fn modloader_get_mod(info: *mut CModInfo, match_type: CMatchType) -> CModResult;
}
unsafe extern "C" {
    #[doc = " @brief Triggers an unload of the specified mod, which will in turn call the unload() method of it.\n It will also be removed from any collections. It is UB if the mod to be unloaded is the currently executing mod.\n @return False if the mod failed to be unloaded in any way, true if it either did not exist or was successfully\n unloaded."]
    pub fn modloader_force_unload(info: CModInfo, match_type: CMatchType) -> bool;
}
unsafe extern "C" {
    #[doc = " @brief Returns an allocated array of CModResults for all successfully loaded objects."]
    pub fn modloader_get_all() -> CModResults;
}
unsafe extern "C" {
    #[doc = " @brief Frees a CModResults object"]
    pub fn modloader_free_results(results: *mut CModResults);
}
unsafe extern "C" {
    #[doc = " @brief Returns an allocated array of CModResults for all successfully loaded objects.\n @return LoadResult describing the action"]
    pub fn modloader_require_mod(info: *mut CModInfo, match_type: CMatchType) -> CLoadResult;
}
